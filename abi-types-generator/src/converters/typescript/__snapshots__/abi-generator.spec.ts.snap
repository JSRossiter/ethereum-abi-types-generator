// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AbiGenerator Ethers v4 or below round trip 1`] = `
"import { ContractTransaction } from 'ethers';
import { Arrayish, BigNumber, BigNumberish, Interface } from 'ethers/utils';
import { EthersContractContext } from '@jsrossiter/ethereum-abi-types-generator';

export type ContractContext = EthersContractContext<
  Abi,
  AbiEventsContext,
  AbiEvents
>;

export declare type EventFilter = {
  address?: string;
  topics?: Array<string>;
  fromBlock?: string | number;
  toBlock?: string | number;
};

export interface ContractTransactionOverrides {
  /**
   * The maximum units of gas for the transaction to use
   */
  gasLimit?: number;
  /**
   * The price (in wei) per unit of gas
   */
  gasPrice?: BigNumber | string | number | Promise<any>;
  /**
   * The nonce to use in the transaction
   */
  nonce?: number;
  /**
   * The amount to send with the transaction (i.e. msg.value)
   */
  value?: BigNumber | string | number | Promise<any>;
  /**
   * The chain ID (or network ID) to use
   */
  chainId?: number;
}

export interface ContractCallOverrides {
  /**
   * The address to execute the call as
   */
  from?: string;
  /**
   * The maximum units of gas for the transaction to use
   */
  gasLimit?: number;
}
export type AbiEvents = 'Event1' | 'Event2';
export interface AbiEventsContext {
  Event1(...parameters: any): EventFilter;
  Event2(...parameters: any): EventFilter;
}
export type AbiMethodNames =
  | 'tupleInputOnly'
  | 'tupleInputAndOutput'
  | 'tupleNoInputNames'
  | 'tupleWithParametersNames'
  | 'byteArrayInputExample'
  | 'int8ReturnExample'
  | 'int256ReturnExample'
  | 'easyExample'
  | 'new'
  | 'getCars'
  | 'deeplyNestedStructs';
export interface Event1EventEmittedResponse {
  token: string;
  exchange: string;
  user: string;
  _value: BigNumberish;
}
export interface Event2EventEmittedResponse {
  _owner: string;
  _spender: string;
  _value: BigNumberish;
}
export interface TupleInputOnlyORequest {
  address: string;
  timestamps: [BigNumberish, BigNumberish, BigNumberish];
}
export interface TupleInputAndOutputResponse {
  affiliate: string;
  0: string;
  offerID: string;
  1: string;
  creationTime: BigNumber;
  2: BigNumber;
  timestamp: number;
  3: number;
  timestamps: [number, number, number, number, number, number];
  4: [number, number, number, number, number, number];
  length: 5;
}
export interface TupleNoInputNamesResponse {
  affiliate: string;
  0: string;
  offerID: string;
  1: string;
  creationTime: BigNumber;
  2: BigNumber;
  timestamp: number;
  3: number;
  timestamps: [number, number, number, number, number, number];
  4: [number, number, number, number, number, number];
  length: 5;
}
export interface TupleWithParametersNamesResponse {
  affiliate: string;
  0: string;
  offerID: string;
  1: string;
  creationTime: BigNumber;
  2: BigNumber;
  timestamp: number;
  3: number;
  timestamps: [number, number, number, number, number, number];
  4: [number, number, number, number, number, number];
  length: 5;
}
export interface OwnedCarsResponse {
  tokenId: BigNumber;
  0: BigNumber;
  attachedComponents: [BigNumber, BigNumber, BigNumber, BigNumber];
  1: [BigNumber, BigNumber, BigNumber, BigNumber];
  detachedComponents: [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ];
  2: [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ];
  owner: string;
  3: string;
  detachedComponentsCount: BigNumber;
  4: BigNumber;
}
export interface DeeplyNestedStructsAdvancedOrderParametersOfferRequest {
  itemType: BigNumberish;
  endAmount: BigNumberish;
}
export interface DeeplyNestedStructsAdvancedOrderParametersConsiderationRequest {
  itemType: BigNumberish;
  token: string;
  identifierOrCriteria: BigNumberish;
  startAmount: BigNumberish;
  endAmount: BigNumberish;
  recipient: string;
}
export interface DeeplyNestedStructsAdvancedOrderParametersRequest {
  offerer: string;
  offer: DeeplyNestedStructsAdvancedOrderParametersOfferRequest[];
  consideration: DeeplyNestedStructsAdvancedOrderParametersConsiderationRequest[];
  totalOriginalConsiderationItems: BigNumberish;
}
export interface DeeplyNestedStructsAdvancedOrderRequest {
  parameters: DeeplyNestedStructsAdvancedOrderParametersRequest;
  numerator: BigNumberish;
  denominator: BigNumberish;
  signature: Arrayish;
  extraData: Arrayish;
}
export interface DeeplyNestedStructsCriteriaResolversRequest {
  orderIndex: BigNumberish;
  side: BigNumberish;
  index: BigNumberish;
  identifier: BigNumberish;
  criteriaProof: Arrayish[];
}
export interface Abi {
  /**
   * Payable: false
   * Constant: false
   * StateMutability: nonpayable
   * Type: function
   * @param o Type: tuple, Indexed: false
   */
  tupleInputOnly(
    o: TupleInputOnlyORequest,
    overrides?: ContractTransactionOverrides
  ): Promise<ContractTransaction>;
  /**
   * Payable: false
   * Constant: true
   * StateMutability: view
   * Type: function
   * @param exchangeAddress Type: address, Indexed: false
   * @param internalAddress Type: address, Indexed: false
   */
  tupleInputAndOutput(
    exchangeAddress: string,
    internalAddress: string,
    overrides?: ContractCallOverrides
  ): Promise<TupleInputAndOutputResponse>;
  /**
   * Payable: false
   * Constant: true
   * StateMutability: view
   * Type: function
   * @param parameter0 Type: address, Indexed: false
   * @param parameter1 Type: address, Indexed: false
   */
  tupleNoInputNames(
    parameter0: string,
    parameter1: string,
    overrides?: ContractCallOverrides
  ): Promise<TupleNoInputNamesResponse>;
  /**
   * Payable: false
   * Constant: true
   * StateMutability: view
   * Type: function
   * @param address1 Type: address, Indexed: false
   * @param address2 Type: address, Indexed: false
   */
  tupleWithParametersNames(
    address1: string,
    address2: string,
    overrides?: ContractCallOverrides
  ): Promise<TupleWithParametersNamesResponse>;
  /**
   * Payable: true
   * Constant: false
   * StateMutability: payable
   * Type: function
   * @param inputData Type: bytes32[2], Indexed: false
   */
  byteArrayInputExample(
    inputData: [Arrayish, Arrayish, Arrayish],
    overrides?: ContractTransactionOverrides
  ): Promise<ContractTransaction>;
  /**
   * Payable: false
   * Constant: true
   * StateMutability: undefined
   * Type: function
   */
  int8ReturnExample(overrides?: ContractCallOverrides): Promise<number>;
  /**
   * Payable: false
   * Constant: true
   * StateMutability: undefined
   * Type: function
   */
  int256ReturnExample(overrides?: ContractCallOverrides): Promise<BigNumber>;
  /**
   * Payable: false
   * Constant: true
   * StateMutability: undefined
   * Type: function
   * @param valid Type: boolean, Indexed: false
   * @param exchangeAddress Type: address, Indexed: false
   * @param timestamp Type: uint8, Indexed: false
   */
  easyExample(
    valid: boolean,
    exchangeAddress: string,
    timestamp: BigNumberish,
    overrides?: ContractCallOverrides
  ): Promise<BigNumber>;
  /**
   * Payable: false
   * Constant: false
   * StateMutability: undefined
   * Type: constructor
   * @param _name Type: bytes32, Indexed: false
   * @param _symbol Type: bytes32, Indexed: false
   * @param _decimals Type: uint256, Indexed: false
   * @param _supply Type: uint256, Indexed: false
   */
  'new'(
    _name: Arrayish,
    _symbol: Arrayish,
    _decimals: BigNumberish,
    _supply: BigNumberish,
    overrides?: ContractTransactionOverrides
  ): Promise<ContractTransaction>;
  /**
   * Payable: false
   * Constant: true
   * StateMutability: view
   * Type: function
   * @param owner Type: address, Indexed: false
   */
  getCars(
    owner: string,
    overrides?: ContractCallOverrides
  ): Promise<OwnedCarsResponse[]>;
  /**
   * Payable: false
   * Constant: true
   * StateMutability: view
   * Type: function
   * @param advancedOrder Type: tuple, Indexed: false
   * @param criteriaResolvers Type: tuple[], Indexed: false
   */
  deeplyNestedStructs(
    advancedOrder: DeeplyNestedStructsAdvancedOrderRequest,
    criteriaResolvers: DeeplyNestedStructsCriteriaResolversRequest[],
    overrides?: ContractCallOverrides
  ): Promise<boolean[]>;
}
"
`;

exports[`AbiGenerator Ethers v5 round trip 1`] = `
"import {
  ContractTransaction,
  ContractInterface,
  BytesLike as Arrayish,
  BigNumber,
  BigNumberish,
  EventFilter,
  PayableOverrides,
  Overrides,
  CallOverrides,
} from 'ethers';
import { EthersContractContextV5 } from '@jsrossiter/ethereum-abi-types-generator';

export type AbiContractContext = EthersContractContextV5<
  Abi,
  AbiMethodNames,
  AbiEventsContext,
  AbiEvents
>;

export type AbiEvents = 'Event1' | 'Event2';
export interface AbiEventsContext {
  Event1(...parameters: any): EventFilter;
  Event2(...parameters: any): EventFilter;
}
export type AbiMethodNames =
  | 'tupleInputOnly'
  | 'tupleInputAndOutput'
  | 'tupleNoInputNames'
  | 'tupleWithParametersNames'
  | 'byteArrayInputExample'
  | 'int8ReturnExample'
  | 'int256ReturnExample'
  | 'easyExample'
  | 'new'
  | 'getCars'
  | 'deeplyNestedStructs';
export interface Event1EventEmittedResponse {
  token: string;
  exchange: string;
  user: string;
  _value: BigNumberish;
}
export interface Event2EventEmittedResponse {
  _owner: string;
  _spender: string;
  _value: BigNumberish;
}
export interface TupleInputOnlyORequest {
  address: string;
  timestamps: [BigNumberish, BigNumberish, BigNumberish];
}
export interface TupleInputAndOutputResponse {
  affiliate: string;
  0: string;
  offerID: string;
  1: string;
  creationTime: BigNumber;
  2: BigNumber;
  timestamp: number;
  3: number;
  timestamps: [number, number, number, number, number, number];
  4: [number, number, number, number, number, number];
  length: 5;
}
export interface TupleNoInputNamesResponse {
  affiliate: string;
  0: string;
  offerID: string;
  1: string;
  creationTime: BigNumber;
  2: BigNumber;
  timestamp: number;
  3: number;
  timestamps: [number, number, number, number, number, number];
  4: [number, number, number, number, number, number];
  length: 5;
}
export interface TupleWithParametersNamesResponse {
  affiliate: string;
  0: string;
  offerID: string;
  1: string;
  creationTime: BigNumber;
  2: BigNumber;
  timestamp: number;
  3: number;
  timestamps: [number, number, number, number, number, number];
  4: [number, number, number, number, number, number];
  length: 5;
}
export interface OwnedCarsResponse {
  tokenId: BigNumber;
  0: BigNumber;
  attachedComponents: [BigNumber, BigNumber, BigNumber, BigNumber];
  1: [BigNumber, BigNumber, BigNumber, BigNumber];
  detachedComponents: [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ];
  2: [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ];
  owner: string;
  3: string;
  detachedComponentsCount: BigNumber;
  4: BigNumber;
}
export interface DeeplyNestedStructsAdvancedOrderParametersOfferRequest {
  itemType: BigNumberish;
  endAmount: BigNumberish;
}
export interface DeeplyNestedStructsAdvancedOrderParametersConsiderationRequest {
  itemType: BigNumberish;
  token: string;
  identifierOrCriteria: BigNumberish;
  startAmount: BigNumberish;
  endAmount: BigNumberish;
  recipient: string;
}
export interface DeeplyNestedStructsAdvancedOrderParametersRequest {
  offerer: string;
  offer: DeeplyNestedStructsAdvancedOrderParametersOfferRequest[];
  consideration: DeeplyNestedStructsAdvancedOrderParametersConsiderationRequest[];
  totalOriginalConsiderationItems: BigNumberish;
}
export interface DeeplyNestedStructsAdvancedOrderRequest {
  parameters: DeeplyNestedStructsAdvancedOrderParametersRequest;
  numerator: BigNumberish;
  denominator: BigNumberish;
  signature: Arrayish;
  extraData: Arrayish;
}
export interface DeeplyNestedStructsCriteriaResolversRequest {
  orderIndex: BigNumberish;
  side: BigNumberish;
  index: BigNumberish;
  identifier: BigNumberish;
  criteriaProof: Arrayish[];
}
export interface Abi {
  /**
   * Payable: false
   * Constant: false
   * StateMutability: nonpayable
   * Type: function
   * @param o Type: tuple, Indexed: false
   */
  tupleInputOnly(
    o: TupleInputOnlyORequest,
    overrides?: Overrides
  ): Promise<ContractTransaction>;
  /**
   * Payable: false
   * Constant: true
   * StateMutability: view
   * Type: function
   * @param exchangeAddress Type: address, Indexed: false
   * @param internalAddress Type: address, Indexed: false
   */
  tupleInputAndOutput(
    exchangeAddress: string,
    internalAddress: string,
    overrides?: CallOverrides
  ): Promise<TupleInputAndOutputResponse>;
  /**
   * Payable: false
   * Constant: true
   * StateMutability: view
   * Type: function
   * @param parameter0 Type: address, Indexed: false
   * @param parameter1 Type: address, Indexed: false
   */
  tupleNoInputNames(
    parameter0: string,
    parameter1: string,
    overrides?: CallOverrides
  ): Promise<TupleNoInputNamesResponse>;
  /**
   * Payable: false
   * Constant: true
   * StateMutability: view
   * Type: function
   * @param address1 Type: address, Indexed: false
   * @param address2 Type: address, Indexed: false
   */
  tupleWithParametersNames(
    address1: string,
    address2: string,
    overrides?: CallOverrides
  ): Promise<TupleWithParametersNamesResponse>;
  /**
   * Payable: true
   * Constant: false
   * StateMutability: payable
   * Type: function
   * @param inputData Type: bytes32[2], Indexed: false
   */
  byteArrayInputExample(
    inputData: [Arrayish, Arrayish, Arrayish],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;
  /**
   * Payable: false
   * Constant: true
   * StateMutability: undefined
   * Type: function
   */
  int8ReturnExample(overrides?: CallOverrides): Promise<number>;
  /**
   * Payable: false
   * Constant: true
   * StateMutability: undefined
   * Type: function
   */
  int256ReturnExample(overrides?: CallOverrides): Promise<BigNumber>;
  /**
   * Payable: false
   * Constant: true
   * StateMutability: undefined
   * Type: function
   * @param valid Type: boolean, Indexed: false
   * @param exchangeAddress Type: address, Indexed: false
   * @param timestamp Type: uint8, Indexed: false
   */
  easyExample(
    valid: boolean,
    exchangeAddress: string,
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;
  /**
   * Payable: false
   * Constant: false
   * StateMutability: undefined
   * Type: constructor
   * @param _name Type: bytes32, Indexed: false
   * @param _symbol Type: bytes32, Indexed: false
   * @param _decimals Type: uint256, Indexed: false
   * @param _supply Type: uint256, Indexed: false
   */
  'new'(
    _name: Arrayish,
    _symbol: Arrayish,
    _decimals: BigNumberish,
    _supply: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;
  /**
   * Payable: false
   * Constant: true
   * StateMutability: view
   * Type: function
   * @param owner Type: address, Indexed: false
   */
  getCars(
    owner: string,
    overrides?: CallOverrides
  ): Promise<OwnedCarsResponse[]>;
  /**
   * Payable: false
   * Constant: true
   * StateMutability: view
   * Type: function
   * @param advancedOrder Type: tuple, Indexed: false
   * @param criteriaResolvers Type: tuple[], Indexed: false
   */
  deeplyNestedStructs(
    advancedOrder: DeeplyNestedStructsAdvancedOrderRequest,
    criteriaResolvers: DeeplyNestedStructsCriteriaResolversRequest[],
    overrides?: CallOverrides
  ): Promise<boolean[]>;
}
"
`;

exports[`AbiGenerator Web3 round trip 1`] = `
"import BN from 'bn.js';
import BigNumber from 'bignumber.js';
import {
  PromiEvent,
  TransactionReceipt,
  EventResponse,
  EventData,
  Web3ContractContext,
} from '@jsrossiter/ethereum-abi-types-generator';

export interface CallOptions {
  from?: string;
  gasPrice?: string;
  gas?: number;
}

export interface SendOptions {
  from: string;
  value?: number | string | BN | BigNumber;
  gasPrice?: string;
  gas?: number;
}

export interface EstimateGasOptions {
  from?: string;
  value?: number | string | BN | BigNumber;
  gas?: number;
}

export interface MethodPayableReturnContext {
  send(options: SendOptions): PromiEvent<TransactionReceipt>;
  send(
    options: SendOptions,
    callback: (error: Error, result: any) => void
  ): PromiEvent<TransactionReceipt>;
  estimateGas(options: EstimateGasOptions): Promise<number>;
  estimateGas(
    options: EstimateGasOptions,
    callback: (error: Error, result: any) => void
  ): Promise<number>;
  encodeABI(): string;
}

export interface MethodConstantReturnContext<TCallReturn> {
  call(): Promise<TCallReturn>;
  call(options: CallOptions): Promise<TCallReturn>;
  call(
    options: CallOptions,
    callback: (error: Error, result: TCallReturn) => void
  ): Promise<TCallReturn>;
  encodeABI(): string;
}

export interface MethodReturnContext extends MethodPayableReturnContext {}

export type AbiContractContext = Web3ContractContext<
  Abi,
  AbiMethodNames,
  AbiEventsContext,
  AbiEvents
>;
export type AbiEvents = 'Event1' | 'Event2';
export interface AbiEventsContext {
  Event1(
    parameters: {
      filter?: {
        token?: string | string[];
        exchange?: string | string[];
        _value?: string | string[];
      };
      fromBlock?: number;
      toBlock?: 'latest' | number;
      topics?: string[];
    },
    callback?: (error: Error, event: EventData) => void
  ): EventResponse;
  Event2(
    parameters: {
      filter?: { _owner?: string | string[]; _spender?: string | string[] };
      fromBlock?: number;
      toBlock?: 'latest' | number;
      topics?: string[];
    },
    callback?: (error: Error, event: EventData) => void
  ): EventResponse;
}
export type AbiMethodNames =
  | 'tupleInputOnly'
  | 'tupleInputAndOutput'
  | 'tupleNoInputNames'
  | 'tupleWithParametersNames'
  | 'byteArrayInputExample'
  | 'int8ReturnExample'
  | 'int256ReturnExample'
  | 'easyExample'
  | 'new'
  | 'getCars'
  | 'deeplyNestedStructs';
export interface Event1EventEmittedResponse {
  token: string;
  exchange: string;
  user: string;
  _value: string;
}
export interface Event2EventEmittedResponse {
  _owner: string;
  _spender: string;
  _value: string;
}
export interface TupleInputOnlyORequest {
  address: string;
  timestamps: [string | number, string | number, string | number];
}
export interface TupleInputAndOutputResponse {
  affiliate: string;
  offerID: string;
  creationTime: string;
  timestamp: string;
  timestamps: [string, string, string, string, string, string];
}
export interface TupleNoInputNamesResponse {
  affiliate: string;
  offerID: string;
  creationTime: string;
  timestamp: string;
  timestamps: [string, string, string, string, string, string];
}
export interface TupleWithParametersNamesResponse {
  affiliate: string;
  offerID: string;
  creationTime: string;
  timestamp: string;
  timestamps: [string, string, string, string, string, string];
}
export interface OwnedCarsResponse {
  tokenId: string;
  attachedComponents: [string, string, string, string];
  detachedComponents: [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string
  ];
  owner: string;
  detachedComponentsCount: string;
}
export interface DeeplyNestedStructsAdvancedOrderParametersOfferRequest {
  itemType: string | number;
  endAmount: string;
}
export interface DeeplyNestedStructsAdvancedOrderParametersConsiderationRequest {
  itemType: string | number;
  token: string;
  identifierOrCriteria: string;
  startAmount: string;
  endAmount: string;
  recipient: string;
}
export interface DeeplyNestedStructsAdvancedOrderParametersRequest {
  offerer: string;
  offer: DeeplyNestedStructsAdvancedOrderParametersOfferRequest[];
  consideration: DeeplyNestedStructsAdvancedOrderParametersConsiderationRequest[];
  totalOriginalConsiderationItems: string;
}
export interface DeeplyNestedStructsAdvancedOrderRequest {
  parameters: DeeplyNestedStructsAdvancedOrderParametersRequest;
  numerator: string;
  denominator: string;
  signature: string | number[];
  extraData: string | number[];
}
export interface DeeplyNestedStructsCriteriaResolversRequest {
  orderIndex: string;
  side: string | number;
  index: string;
  identifier: string;
  criteriaProof: string | number[][];
}
export interface Abi {
  /**
   * Payable: false
   * Constant: false
   * StateMutability: nonpayable
   * Type: function
   * @param o Type: tuple, Indexed: false
   */
  tupleInputOnly(o: TupleInputOnlyORequest): MethodReturnContext;
  /**
   * Payable: false
   * Constant: true
   * StateMutability: view
   * Type: function
   * @param exchangeAddress Type: address, Indexed: false
   * @param internalAddress Type: address, Indexed: false
   */
  tupleInputAndOutput(
    exchangeAddress: string,
    internalAddress: string
  ): MethodConstantReturnContext<TupleInputAndOutputResponse>;
  /**
   * Payable: false
   * Constant: true
   * StateMutability: view
   * Type: function
   * @param parameter0 Type: address, Indexed: false
   * @param parameter1 Type: address, Indexed: false
   */
  tupleNoInputNames(
    parameter0: string,
    parameter1: string
  ): MethodConstantReturnContext<TupleNoInputNamesResponse>;
  /**
   * Payable: false
   * Constant: true
   * StateMutability: view
   * Type: function
   * @param address1 Type: address, Indexed: false
   * @param address2 Type: address, Indexed: false
   */
  tupleWithParametersNames(
    address1: string,
    address2: string
  ): MethodConstantReturnContext<TupleWithParametersNamesResponse>;
  /**
   * Payable: true
   * Constant: false
   * StateMutability: payable
   * Type: function
   * @param inputData Type: bytes32[2], Indexed: false
   */
  byteArrayInputExample(
    inputData: [string | number[], string | number[], string | number[]]
  ): MethodPayableReturnContext;
  /**
   * Payable: false
   * Constant: true
   * StateMutability: undefined
   * Type: function
   */
  int8ReturnExample(): MethodConstantReturnContext<string>;
  /**
   * Payable: false
   * Constant: true
   * StateMutability: undefined
   * Type: function
   */
  int256ReturnExample(): MethodConstantReturnContext<string>;
  /**
   * Payable: false
   * Constant: true
   * StateMutability: undefined
   * Type: function
   * @param valid Type: boolean, Indexed: false
   * @param exchangeAddress Type: address, Indexed: false
   * @param timestamp Type: uint8, Indexed: false
   */
  easyExample(
    valid: boolean,
    exchangeAddress: string,
    timestamp: string | number
  ): MethodConstantReturnContext<string>;
  /**
   * Payable: false
   * Constant: false
   * StateMutability: undefined
   * Type: constructor
   * @param _name Type: bytes32, Indexed: false
   * @param _symbol Type: bytes32, Indexed: false
   * @param _decimals Type: uint256, Indexed: false
   * @param _supply Type: uint256, Indexed: false
   */
  'new'(
    _name: string | number[],
    _symbol: string | number[],
    _decimals: string,
    _supply: string
  ): MethodReturnContext;
  /**
   * Payable: false
   * Constant: true
   * StateMutability: view
   * Type: function
   * @param owner Type: address, Indexed: false
   */
  getCars(owner: string): MethodConstantReturnContext<OwnedCarsResponse[]>;
  /**
   * Payable: false
   * Constant: true
   * StateMutability: view
   * Type: function
   * @param advancedOrder Type: tuple, Indexed: false
   * @param criteriaResolvers Type: tuple[], Indexed: false
   */
  deeplyNestedStructs(
    advancedOrder: DeeplyNestedStructsAdvancedOrderRequest,
    criteriaResolvers: DeeplyNestedStructsCriteriaResolversRequest[]
  ): MethodConstantReturnContext<boolean[]>;
}
"
`;
